import defaultAxios from "axios";
import * as SecureStore from "expo-secure-store";
import store from "../reducers/configureStore";
import { apiUrlsNode } from "../../globals";
import { types } from "../redux/actionTypes"; // Import the action types

const axios = defaultAxios.create({
  baseURL: apiUrlsNode.BASE_URL2,
  timeout: 30000,
  responseType: "json",
  headers: {
    "content-type": "application/json",
    Accept: "application/json",
  },
});

let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

// Request interceptor: Adds access token to requests
axios.interceptors.request.use(
  async (config) => {
    const user = await SecureStore.getItemAsync("user");
    if (user) {
      const parsedUser = JSON.parse(user);
      config.headers["auth-token"] = `${parsedUser.token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor: Handles token refresh on 401 error
axios.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Check if the error status is 401 and if we haven't retried the request yet
    if (error.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        // If a refresh request is already in progress, queue the failed request
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then((token) => {
            originalRequest.headers["auth-token"] = `${token}`;
            return axios(originalRequest);
          })
          .catch((err) => Promise.reject(err));
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // Get refresh token from SecureStore
        const user = await SecureStore.getItemAsync("user");
        if (!user) {
          throw new Error("No user data found");
        }
        const parsedUser = JSON.parse(user);
        const refreshToken = parsedUser.refreshToken;

        // Call the refresh token API, sending `auth-token` in headers
        const refreshResponse = await defaultAxios.post(
          `/api/auth/refresh-token`,
          {},
          {
            headers: {
              "auth-token": refreshToken, // Send refresh token in headers
            },
          }
        );

        const newAccessToken = refreshResponse.data.accessToken;

        // Save the new access token in SecureStore
        const updatedUser = { ...parsedUser, token: newAccessToken };
        await SecureStore.setItemAsync("user", JSON.stringify(updatedUser));

        // Process failed requests
        processQueue(null, newAccessToken);

        // Retry the original request with the new token
        originalRequest.headers["auth-token"] = `${newAccessToken}`;
        return axios(originalRequest);
      } catch (refreshError) {
        // If refresh token has expired or refresh fails, log the user out
        store.dispatch({
          type: types.USER_STATE_CHANGE, // Redux action to reset user state
          currentUser: null,
          loaded: true,
        });

        await SecureStore.deleteItemAsync("user"); // Clear stored token
        processQueue(refreshError, null);
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  }
);

export default axios;
