import React, { FC, useEffect, useState } from 'react';
import { Image, TouchableOpacity, View, } from 'react-native';
import RNQRGenerator from 'rn-qr-generator';
import { COLORS, hp } from '../../assets/stylesGuide';
import { Save, ScanHistory, Share as ShareIcon } from '../../assets/svg';
import { BackeHeader, BodyText, Layout } from '../../components';
import { appConfigtStateSelectors, useAppConfigState } from '../../states/appConfig';
import styles from './styles.qrCode';
import { handleDownloadMedia, showToast } from '../../utils/myUtils';
import { useRoute } from '@react-navigation/native';
import { ALERT_HEADER, ALERT_TYPES } from '../../assets/constants';
import Share from 'react-native-share';

const QrCodeScreen: FC = () => {
    const lang = useAppConfigState(appConfigtStateSelectors.language)
    const route: any = useRoute()
    const QrData = route.params?.data
    const [code, setcode] = useState<string>("")

    useEffect(() => {
        if (QrData?.data) {
            RNQRGenerator.generate({
                value: QrData?.data,
                height: hp(40),
                width: hp(40),
                base64: true,
                correctionLevel: 'H',
                padding: { top: 8, right: 8, bottom: 8, left: 8 }
            })
                .then(response => {
                    const { uri, width, height, base64 } = response;
                    setcode(uri);
                })
                .catch(error => console.log('Cannot create QR code', error));
        }
    }, [QrData?.data, QrData?.createdAt])


    const handleSave = async () => {
        try {
            if (code) {
                const DownloadedMedia = await handleDownloadMedia(code)
                if (DownloadedMedia) {
                    showToast(lang['_96'], ALERT_TYPES.SUCCESS, ALERT_HEADER.SUCCESS)
                } else {
                    showToast(lang['_97'], ALERT_TYPES.DANGER, ALERT_HEADER.DANGER)
                }
            }
        } catch (error) {
            showToast(lang['_97'], ALERT_TYPES.DANGER, ALERT_HEADER.DANGER)
        }
    }


    const handeShare = async () => {
        if (!code) {
            return
        }
        const localImagePath = code

        const shareOptions = {
            title: 'Ever Scanner',
            message: 'This QR code is generated by EverScanner {My Link does here}',
            url: localImagePath,
            type: 'image/png',
        };

        try {
            await Share.open(shareOptions);
        } catch (error) {
            console.log('Error sharing image:', error);
        }
    }



    return (
        <Layout fixed={true} >

            <BackeHeader title={lang['_69']} />

            <View
                style={styles.main}
            >
                <View style={styles.row}>
                    <ScanHistory width={hp(5)} height={hp(5)} />

                    <View style={styles.context}>
                        <BodyText style={styles.dataTxt}>{lang['_68']}</BodyText>
                        <BodyText numberOfLines={1} style={styles.date}>{QrData?.data}</BodyText>
                    </View>
                </View>


            </View>



            {/* QR CODE */}

            <View style={styles.codeContainer}>
                {
                    code &&
                    <Image
                        source={{ uri: code }}
                        style={styles.code}
                    />
                }
            </View>

            {/* BUTTONS */}

            <View style={styles.btnContainer}>

                <View>
                    <TouchableOpacity
                        activeOpacity={0.8}
                        onPress={() => handeShare()}
                        style={styles.twinBtn}
                    >
                        <ShareIcon fill={COLORS.SECONDARY} width={hp(2.2)} height={hp(2.2)} />
                    </TouchableOpacity>
                    <BodyText style={styles.twinBtnTxt}>{lang["_65"]}</BodyText>
                </View>


                <View>
                    <TouchableOpacity
                        activeOpacity={0.8}
                        onPress={() => handleSave()}
                        style={styles.twinBtn}
                    >
                        <Save fill={COLORS.SECONDARY} width={hp(2.2)} height={hp(2.2)} />
                    </TouchableOpacity>
                    <BodyText style={styles.twinBtnTxt}>{lang["_67"]}</BodyText>
                </View>


            </View>

        </Layout >

    )
}

export default QrCodeScreen

